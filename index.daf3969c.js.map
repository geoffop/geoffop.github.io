{"mappings":"ACAA;;;;;;;;;;;CAWC,EACD,MAAM,UAAoB,YACtB,mBAAoB,CAChB,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,YAAY,CAAC,WAEjC,IAAI,EAAY,IAAI,CAAC,aAAa,CAAC,gBA4BnC,GA3BA,2FAA2F;AAC3F,IAAI,CAAC,SAAS,CAAG,GAAc,EAAU,WAAW,CAAC,IAAI,IAAO,IAAI,CAAC,YAAY,CAAC,cAAgB,OAW7F,IAAI,CAAC,KAAK,CAAC,eAAe,GAC7B,IAAI,CAAC,SAAS,CAAG,CAAC,uBAAuB,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CACvE,2CAA2C;AAC3C,EAAY,WAAW,CAAC,UAAW,IAAI,CAAC,SAAS,CAAE,SAEnD,IAAI,CAAC,KAAK,CAAC,eAAe,CAAG,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAIpD,IAED,AADA,CAAA,EAAY,SAAS,aAAa,CAAC,SAAnC,EACU,IAAI,CAAG,SACjB,EAAU,SAAS,CAAC,GAAG,CAAC,eACxB,IAAI,CAAC,MAAM,CAAC,IAEZ,CAAC,EAAU,WAAW,CAAE,CACxB,IAAM,EAAiB,SAAS,aAAa,CAAC,OAC9C,CAAA,EAAe,SAAS,CAAG,sBAC3B,EAAe,WAAW,CAAG,IAAI,CAAC,SAAS,CAC3C,EAAU,MAAM,CAAC,EACrB,CAEA,8EAA8E;AAC9E,IAAI,CAAC,gBAAgB,CAAC,cAAe,EAAY,eAAe,CAAE,CAAC,KAAM,CAAA,CAAI,GAE7E,qEAAqE;AACrE,oGAAoG;AACpG,qHAAqH;AACrH,IAAI,CAAC,gBAAgB,CAAC,QAAS,AAAA,GAAK,IAAI,CAAC,SAAS,GACtD,CAEA,iEAAiE;AACjE,+BAA+B;AAC/B,IAAI;AAEJ;;KAEC,EACD,OAAO,YAAY,CAAI,CAAE,CAAG,CAAE,CAAE,CAAE,CAC9B,IAAM,EAAS,SAAS,aAAa,CAAC,OACtC,CAAA,EAAO,GAAG,CAAG,EACb,EAAO,IAAI,CAAG,EACV,GACA,CAAA,EAAO,EAAE,CAAG,CADhB,EAGA,SAAS,IAAI,CAAC,MAAM,CAAC,EACzB,CAEA;;;;;;;;KAQC,EACD,OAAO,iBAAkB,CACjB,EAAY,YAAY,GAE5B,8EAA8E;AAC9E,EAAY,WAAW,CAAC,aAAc,oCACtC,qDAAqD;AACrD,EAAY,WAAW,CAAC,aAAc,0BAEtC,kHAAkH;AAClH,EAAY,WAAW,CAAC,aAAc,uCACtC,EAAY,WAAW,CAAC,aAAc,kCAEtC,EAAY,YAAY,CAAG,CAAA,EAC/B,CAEA,WAAY,CACR,IAAM,EAAS,IAAI,gBAAgB,IAAI,CAAC,YAAY,CAAC,WAAa,EAAE,EACpE,EAAO,MAAM,CAAC,WAAY,KAE1B,IAAM,EAAW,SAAS,aAAa,CAAC,SACxC,CAAA,EAAS,KAAK,CAAG,IACjB,EAAS,MAAM,CAAG,IAClB,uLAAuL;AACvL,EAAS,KAAK,CAAG,IAAI,CAAC,SAAS,CAC/B,EAAS,KAAK,CAAG,0EACjB,EAAS,eAAe,CAAG,CAAA,EAC3B,+FAA+F;AAC/F,6CAA6C;AAC7C,EAAS,GAAG,CAAG,CAAC,uCAAuC,EAAE,mBAAmB,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAO,QAAQ,GAAG,CAAC,CAChH,IAAI,CAAC,MAAM,CAAC,GAEZ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,iBAEnB,qBAAqB;AACrB,IAAI,CAAC,aAAa,CAAC,UAAU,KAAK,EACtC,CACJ,CACA,0BAA0B;AAC1B,eAAe,MAAM,CAAC,eAAgB,E,4D","sources":["<anon>","node_modules/lite-youtube-embed/src/lite-yt-embed.js"],"sourcesContent":["/**\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\n *\n * Thx to these as the inspiration\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\n *   https://autoplay-youtube-player.glitch.me/\n *\n * Once built it, I also found these:\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\n *   https://github.com/Daugilas/lazyYT\n *   https://github.com/vb/lazyframe\n */ class LiteYTEmbed extends HTMLElement {\n    connectedCallback() {\n        this.videoId = this.getAttribute(\"videoid\");\n        let playBtnEl = this.querySelector(\".lty-playbtn\");\n        // A label for the button takes priority over a [playlabel] attribute on the custom-element\n        this.playLabel = playBtnEl && playBtnEl.textContent.trim() || this.getAttribute(\"playlabel\") || \"Play\";\n        /**\n         * Lo, the youtube placeholder image!  (aka the thumbnail, poster image, etc)\n         *\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\n         *\n         * TODO: Do the sddefault->hqdefault fallback\n         *       - When doing this, apply referrerpolicy (https://github.com/ampproject/amphtml/pull/3940)\n         * TODO: Consider using webp if supported, falling back to jpg\n         */ if (!this.style.backgroundImage) {\n            this.posterUrl = `https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg`;\n            // Warm the connection for the poster image\n            LiteYTEmbed.addPrefetch(\"preload\", this.posterUrl, \"image\");\n            this.style.backgroundImage = `url(\"${this.posterUrl}\")`;\n        }\n        // Set up play button, and its visually hidden label\n        if (!playBtnEl) {\n            playBtnEl = document.createElement(\"button\");\n            playBtnEl.type = \"button\";\n            playBtnEl.classList.add(\"lty-playbtn\");\n            this.append(playBtnEl);\n        }\n        if (!playBtnEl.textContent) {\n            const playBtnLabelEl = document.createElement(\"span\");\n            playBtnLabelEl.className = \"lyt-visually-hidden\";\n            playBtnLabelEl.textContent = this.playLabel;\n            playBtnEl.append(playBtnLabelEl);\n        }\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\n        this.addEventListener(\"pointerover\", LiteYTEmbed.warmConnections, {\n            once: true\n        });\n        // Once the user clicks, add the real iframe and drop our play button\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\n        this.addEventListener(\"click\", (e)=>this.addIframe());\n    }\n    // // TODO: Support the the user changing the [videoid] attribute\n    // attributeChangedCallback() {\n    // }\n    /**\n     * Add a <link rel={preload | preconnect} ...> to the head\n     */ static addPrefetch(kind, url, as) {\n        const linkEl = document.createElement(\"link\");\n        linkEl.rel = kind;\n        linkEl.href = url;\n        if (as) linkEl.as = as;\n        document.head.append(linkEl);\n    }\n    /**\n     * Begin pre-connecting to warm up the iframe load\n     * Since the embed's network requests load within its iframe,\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\n     *\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\n     */ static warmConnections() {\n        if (LiteYTEmbed.preconnected) return;\n        // The iframe document and most of its subresources come right off youtube.com\n        LiteYTEmbed.addPrefetch(\"preconnect\", \"https://www.youtube-nocookie.com\");\n        // The botguard script is fetched off from google.com\n        LiteYTEmbed.addPrefetch(\"preconnect\", \"https://www.google.com\");\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\n        LiteYTEmbed.addPrefetch(\"preconnect\", \"https://googleads.g.doubleclick.net\");\n        LiteYTEmbed.addPrefetch(\"preconnect\", \"https://static.doubleclick.net\");\n        LiteYTEmbed.preconnected = true;\n    }\n    addIframe() {\n        const params = new URLSearchParams(this.getAttribute(\"params\") || []);\n        params.append(\"autoplay\", \"1\");\n        const iframeEl = document.createElement(\"iframe\");\n        iframeEl.width = 560;\n        iframeEl.height = 315;\n        // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\n        iframeEl.title = this.playLabel;\n        iframeEl.allow = \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\";\n        iframeEl.allowFullscreen = true;\n        // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\n        // https://stackoverflow.com/q/64959723/89484\n        iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${params.toString()}`;\n        this.append(iframeEl);\n        this.classList.add(\"lyt-activated\");\n        // Set focus for a11y\n        this.querySelector(\"iframe\").focus();\n    }\n}\n// Register custom element\ncustomElements.define(\"lite-youtube\", LiteYTEmbed);\n\n//# sourceMappingURL=index.daf3969c.js.map\n","/**\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\n *\n * Thx to these as the inspiration\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\n *   https://autoplay-youtube-player.glitch.me/\n *\n * Once built it, I also found these:\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\n *   https://github.com/Daugilas/lazyYT\n *   https://github.com/vb/lazyframe\n */\nclass LiteYTEmbed extends HTMLElement {\n    connectedCallback() {\n        this.videoId = this.getAttribute('videoid');\n\n        let playBtnEl = this.querySelector('.lty-playbtn');\n        // A label for the button takes priority over a [playlabel] attribute on the custom-element\n        this.playLabel = (playBtnEl && playBtnEl.textContent.trim()) || this.getAttribute('playlabel') || 'Play';\n\n        /**\n         * Lo, the youtube placeholder image!  (aka the thumbnail, poster image, etc)\n         *\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\n         *\n         * TODO: Do the sddefault->hqdefault fallback\n         *       - When doing this, apply referrerpolicy (https://github.com/ampproject/amphtml/pull/3940)\n         * TODO: Consider using webp if supported, falling back to jpg\n         */\n        if (!this.style.backgroundImage) {\n          this.posterUrl = `https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg`;\n          // Warm the connection for the poster image\n          LiteYTEmbed.addPrefetch('preload', this.posterUrl, 'image');\n\n          this.style.backgroundImage = `url(\"${this.posterUrl}\")`;\n        }\n\n        // Set up play button, and its visually hidden label\n        if (!playBtnEl) {\n            playBtnEl = document.createElement('button');\n            playBtnEl.type = 'button';\n            playBtnEl.classList.add('lty-playbtn');\n            this.append(playBtnEl);\n        }\n        if (!playBtnEl.textContent) {\n            const playBtnLabelEl = document.createElement('span');\n            playBtnLabelEl.className = 'lyt-visually-hidden';\n            playBtnLabelEl.textContent = this.playLabel;\n            playBtnEl.append(playBtnLabelEl);\n        }\n\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\n        this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {once: true});\n\n        // Once the user clicks, add the real iframe and drop our play button\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\n        this.addEventListener('click', e => this.addIframe());\n    }\n\n    // // TODO: Support the the user changing the [videoid] attribute\n    // attributeChangedCallback() {\n    // }\n\n    /**\n     * Add a <link rel={preload | preconnect} ...> to the head\n     */\n    static addPrefetch(kind, url, as) {\n        const linkEl = document.createElement('link');\n        linkEl.rel = kind;\n        linkEl.href = url;\n        if (as) {\n            linkEl.as = as;\n        }\n        document.head.append(linkEl);\n    }\n\n    /**\n     * Begin pre-connecting to warm up the iframe load\n     * Since the embed's network requests load within its iframe,\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\n     *\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\n     */\n    static warmConnections() {\n        if (LiteYTEmbed.preconnected) return;\n\n        // The iframe document and most of its subresources come right off youtube.com\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');\n        // The botguard script is fetched off from google.com\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\n\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\n        LiteYTEmbed.addPrefetch('preconnect', 'https://googleads.g.doubleclick.net');\n        LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\n\n        LiteYTEmbed.preconnected = true;\n    }\n\n    addIframe() {\n        const params = new URLSearchParams(this.getAttribute('params') || []);\n        params.append('autoplay', '1');\n\n        const iframeEl = document.createElement('iframe');\n        iframeEl.width = 560;\n        iframeEl.height = 315;\n        // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\n        iframeEl.title = this.playLabel;\n        iframeEl.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\n        iframeEl.allowFullscreen = true;\n        // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\n        // https://stackoverflow.com/q/64959723/89484\n        iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${params.toString()}`;\n        this.append(iframeEl);\n\n        this.classList.add('lyt-activated');\n\n        // Set focus for a11y\n        this.querySelector('iframe').focus();\n    }\n}\n// Register custom element\ncustomElements.define('lite-youtube', LiteYTEmbed);\n"],"names":["LiteYTEmbed","HTMLElement","connectedCallback","videoId","getAttribute","playBtnEl","querySelector","playLabel","textContent","trim","style","backgroundImage","posterUrl","addPrefetch","document","createElement","type","classList","add","append","playBtnLabelEl","className","addEventListener","warmConnections","once","e","addIframe","kind","url","as","linkEl","rel","href","head","preconnected","params","URLSearchParams","iframeEl","width","height","title","allow","allowFullscreen","src","encodeURIComponent","toString","focus","customElements","define"],"version":3,"file":"index.daf3969c.js.map"}